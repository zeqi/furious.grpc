
//======================================
//     {{&routeClassName}}.getBy{{&methodSignature}}
//======================================

{{&routeClassName}}.getBy{{&methodSignature}}_method_qname = '{{&routeClassName}}.getBy{{&methodSignature}}';

/**
* The target DAO invoker of retrieving an {{&moduleName}}.
* @param {object} context, the context data structure is as below:
*   {
*      targetFnQName: <string>, 
*      opts: <object>, 
*      result: <object>
*      fault: <Error>
*   }
* @private
*/
{{&routeClassName}}.prototype._getBy{{&methodSignature}} = function(context) {
   var method = '_getBy{{&methodSignature}}';
   try {
     var req = context.opts.req;
     var res = context.opts.res;
     var id = req.params['{{&paramName}}'];
     context.opts.id = id;
     logger.debug(method, ">>>", id);

     return dao.retrieveBy{{&methodSignature}}(id).then(function(result) {
        context.result = result;
        return context;
     }).fail(function(error) {
      context.fault = error;
      return context;
     });
   } catch (error) {
    logger.error('Error occurs during DAO call: ', error);
    context.fault = error;
    return Q(context);
   }
};

/**
 * Get a {{&moduleName}} by {{&methodSignature}}
 *
 * {{#annotations}}
 * {{{.}}}
 * {{/annotations}}
 *
 */
{{&routeClassName}}.prototype.getBy{{&methodSignature}} = function (req, res) {
  var context = {
       targetFnQName: {{&routeClassName}}.getBy{{&methodSignature}}_method_qname,
       opts: {
           req: req,
           res: res
       },
       result: null,
       fault: null
  };
  var self = this;
  try {
    var preHookChainInvoker = new PreHookChainInvoker(context);
    var postHookChainInvoker = new PostHookChainInvoker(context);

    logger.debug('[' + {{&routeClassName}}.getBy{{&methodSignature}}_method_qname + '] Enter');
    // preHook call
    preHookChainInvoker.invoke()
    // DAO call
    .then(function(context) {
      if (context.fault) {
        return context;
      }
      return self._getBy{{&methodSignature}}(context);
    })
    // postHook call
    .then(function(context) {
      if (context.fault) {
        return context;
      }
      return postHookChainInvoker.invoke();
    })
    // response
    .then(function(context) {
      if (context.fault) {
        logger.error('[' + {{&routeClassName}}.getBy{{&methodSignature}}_method_qname + '] Exit(failed): ', context.fault);
        var errorCode = context.fault.errorCode;
        if (! errorCode) {
          errorCode = requestUtil.httpcode.INTERNAL_ERROR;
        }
        var errorMsg = (context.fault.reason) ? context.fault.reason : 'Failed to retrieve the record.';
        var details = (context.fault.details) ? context.fault.details : context.fault;
        requestUtil.unifiedErrorResponse(context.opts.req,
           errorMsg,
            details,
            errorCode, 
            context.opts.res
        );
        return;
      }

     if (context.result) {
         requestUtil.jsonResponse(context.result, context.opts.res, requestUtil.httpcode.OK);
         logger.debug('[' + {{&routeClassName}}.getBy{{&methodSignature}}_method_qname + '] Exit(sucessed): ', context.result);
         return;
     }

     logger.error('[' + {{&routeClassName}}.getBy{{&methodSignature}}_method_qname + '] Exit(failed): ', new Error('The record with id ' + context.opts.id + ' does not exist.'));
     requestUtil.unifiedErrorResponse(context.opts.req,
         'Failed to retrieve the record.',
         'The record with id ' + context.opts.id + ' does not exist.',
         requestUtil.httpcode.NOT_FOUND, context.opts.res);
   })
   // fault catch
   .fail(function(error) {
      context.fault = error;
      var errorCode = context.fault.errorCode;
        if (! errorCode) {
          errorCode = requestUtil.httpcode.INTERNAL_ERROR;
        }
        var errorMsg = (context.fault.reason) ? context.fault.reason : 'Failed to retrieve the record.';
        var details = (context.fault.details) ? context.fault.details : context.fault;
      logger.error('[' + {{&routeClassName}}.getBy{{&methodSignature}}_method_qname + '] Exit(failed): ', context.fault);
        requestUtil.unifiedErrorResponse(context.opts.req,
           errorMsg,
            details,
            errorCode, 
            context.opts.res
        );
   });
  } catch (error) {
    context.fault = error;
    logger.error('[' + {{&routeClassName}}.getBy{{&methodSignature}}_method_qname + '] Exit(failed): ', context.fault);
    var errorCode = context.fault.errorCode;
        if (! errorCode) {
          errorCode = requestUtil.httpcode.INTERNAL_ERROR;
        }
        var errorMsg = (context.fault.reason) ? context.fault.reason : 'Failed to retrieve the record.';
        var details = (context.fault.details) ? context.fault.details : context.fault;
    requestUtil.unifiedErrorResponse(context.opts.req,
           errorMsg,
            details,
            errorCode, 
            context.opts.res
        );
  }
  
};